using Serilog;
using solum.core;
using solum.core.dataprocess;
using solum.core.smtp;
using solum.core.storage;
using solum.extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace solum
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Loading logger...");
            Serilog.Log.Logger = new LoggerConfiguration()
                            .ReadFrom.AppSettings()
                            .Enrich.WithThreadId()
                            .Enrich.FromLogContext()
                            .CreateLogger();

            var numRecords = 100000;

            //RunEmailTest();
            RunKeyValueTest(numRecords);            
            // Server.RunServer();
            // RunProcessTests();
        }

        static void RunEmailTest(int emailsToGenerate = 1)
        {
            using (var server = Server.Load("./config/email-test.config.json"))
            {
                server.Start();
                var emailService = server.Service<EmailService>(true);

                for (var lcv = 1; lcv <= emailsToGenerate; lcv++)
                {
                    emailService.Email("brad.serbu@geofeedia.com", "Test email #{0}".format(lcv), "This is the {0} email generated by the email test service".format(lcv));
                }

                server.Stop();
            }
        }

        static void RunKeyValueTest(int numRecords = 1)
        {
            var db = "test-db";
            var key = "name";
            var value = "Brad Serbu";
            
            using (var server = Server.Current)
            {
                var store = server.Storage.OpenKeyValueStore(db);

                Log.Information("Setting  {0} records to key value store...", numRecords);
                var setTimer = Timed.RunTimed(() =>
                {
                    for (var lcv = 0; lcv < numRecords; lcv++)
                        store.Set("{0}-{1}".format(key, lcv), value);
                });

                Console.WriteLine("PRESS <ENTER> TO GET THE RECORDS...");
                Console.ReadLine();

                Log.Information("Getting  {0} records from key value store...", numRecords);
                var getTimer = Timed.RunTimed(() =>
                {
                    string val;
                    for (var lcv = 0; lcv < numRecords; lcv++)
                    {
                        var k = "{0}-{1}".format(key, lcv);
                        if (store.Get(k, out val) == false)
                            Log.Error("Error geting key: {0}...", key);
                    }
                });

                Console.WriteLine("PRESS <ENTER> TO REMOVE THE RECORDS...");
                Console.ReadLine();

                Log.Information("Removing {0} records from key value store...", numRecords);                
                var removeTimer = Timed.RunTimed(() =>
                {
                    for (var lcv = 0; lcv < numRecords; lcv++)
                    {
                        var k = "{0}-{1}".format(key, lcv);
                        if (store.Remove(k) == false)
                            Log.Error("Error removing key: {0}...", key);                        
                    }
                });

                Log.Information("- SET.......... {0:N3}s ({1:N2}rec/s)", setTimer.TotalSeconds, numRecords / setTimer.TotalSeconds);
                Log.Information("- GET.......... {0:N3}s ({1:N2}rec/s)", getTimer.TotalSeconds, numRecords / getTimer.TotalSeconds);
                Log.Information("- REMOVE....... {0:N3}s ({1:N2}rec/s)", removeTimer.TotalSeconds, numRecords / removeTimer.TotalSeconds);
            }            
        }

        static void RunProcessTests()
        {
            var source = SayHello(10);
            singleChainedProcess(source).Run();
            manyStepParallelProcess(source).Run();
            mixedProcess(source).Run();

            //var count = 0;
            //process.OnEntryProcessed += (_, entry) =>
            //{
            //    Log.Information("Processed entry #{0:N}", ++count);
            //};

            //process.OnFinished += (_, __) =>
            //{
            //    Log.Information("Processed {0} items.", count);
            //};

            //process.Run();
        }

        static DataProcess singleChainedProcess<T>(IEnumerable<T> source)
        {
            var count = 0;
            var process = DataProcess.With(SayHello(10))
                                     .Do(hello => Log.Information(hello))
                                     .Then(_ =>
                                     {
                                         Log.Information("Waiting 100 ms...");
                                         Thread.Sleep(100);
                                     })
                                     .Then(hello =>
                                     {
                                         Log.Information("\t#{0:N}", ++count);

                                         return new
                                         {
                                             message = hello,
                                             count = count
                                         };
                                     })
                                    .Then(hello => Log.Information("\t {0}", hello))
                                    .Process;

            return process;
        }
        static DataProcess manyStepParallelProcess<T>(IEnumerable<T> source)
        {
            var count = 0;
            var process = DataProcess.With(SayHello(10))
                                     .Do(hello => Log.Information(hello))
                                     .Do(_ =>
                                     {
                                         Log.Information("Waiting 100 ms...");
                                         Thread.Sleep(100);
                                     })
                                     .Do(hello =>
                                     {
                                         Log.Information("\t#{0:N}", ++count);

                                         return new
                                         {
                                             message = hello,
                                             count = count
                                         };
                                     })
                                    .Then(hello => Log.Information("\t {0}", hello))
                                    .Process;

            return process;
        }
        static DataProcess mixedProcess<T>(IEnumerable<T> source)
        {
            var count = 0;
            var process = DataProcess.With(SayHello(10))
                                     .Do(hello => Log.Information(hello))
                                     .Do(_ =>
                                     {
                                         Log.Information("Waiting 100 ms...");
                                         Thread.Sleep(100);
                                     })
                                     .Do(hello =>
                                     {
                                         Log.Information("\t#{0:N}", ++count);

                                         return new
                                         {
                                             message = hello,
                                             count = count
                                         };
                                     })
                                    .Then(hello => Log.Information("\t {0}", hello))
                                    .Process;

            return process;
        }

        static IEnumerable<string> SayHello(int count)
        {
            for (var lcv = 0; lcv < count; lcv++)
                yield return "Hello World!";
        }
    }
}
